"""
Author - Sahana M
Date - 3rd September 2021
After the completion of the pipeline this function arranges the output in the format needed and returns as a dictionary
"""

# Import python packages

import logging
import numpy as np

# Import functions from within the project

from python3.config.mappings.get_app_id import get_app_id

from python3.config.pipeline_constants import GlobalConfigParams

from python3.itemization.prepare_results.itemization_to_disagg import itemization_to_disagg


def log_item_matrix(app_id_dict, bill_cycle_estimate, logger):

    """
    Utility to log the item output matrix

    Parameters:
        app_id_dict             (dict)                  : Appliance id information
        bill_cycle_estimate     (numpy.ndarray)         : appliance estimates at bill cycle level
        logger                  (logger)                : Logger object

    """

    # Log the item output matrix

    logger.info('Mapping of column number to appliance id in Itemization is | %s', str(app_id_dict).replace('\n', ' '))

    for row_idx in range(bill_cycle_estimate.shape[0]):
        logger.info('Itemization Bill cycle number %d  | %s', row_idx + 1, str(list(map(str, bill_cycle_estimate[row_idx, :]))).replace('\n', ' '))


def prepare_appid_dict(app_name_list, output_write_idx_map, app_id_dict):
    """
    Function to return the appid dictionary

    Parameters:
        app_name_list           (list): list of appliances
        output_write_idx_map    (dict): contains writing indexes corresponding to app ids
        app_id_dict             (dict): contains mapping of app name to app id

    Returns:
        app_id_dict             (dict): contains mapping of app name to app id
    """

    for app_name in app_name_list:
        if app_name == 'total' or app_name == 'temp' or app_name == 'ent' or app_name == 'ld' or app_name == 'cook':
            continue
        elif app_name == 'hvac' or app_name == 'hvac_smb':
            col_idx = output_write_idx_map.get(app_name)
            app_id_dict[col_idx[0]] = get_app_id('ac')
            app_id_dict[col_idx[1]] = get_app_id('sh')
        elif app_name == 'va':
            col_idx = output_write_idx_map.get(app_name)
            app_id_dict[col_idx[0]] = get_app_id('va')
            app_id_dict[col_idx[1]] = get_app_id('vad')
        elif app_name == 'ao' or app_name == 'ao_smb':
            app_id_dict[output_write_idx_map.get(app_name)] = get_app_id('ao')
        else:
            app_id_dict[output_write_idx_map.get(app_name)] = get_app_id(app_name)

    return app_id_dict


def prepare_itemization_aer_results(item_input_object, item_output_object, pipeline_output_object, run_successful):

    """
    Parameters:
        item_input_object         (dict)              : Contains all inputs required to run the pipeline
        item_output_object        (dict)              : Contains all outputs generated by running the pipeline
        pipeline_output_object    (dict)              : Contains pipeline output objects
        run_successful            (bool)              : true if hybrid v2 run was successful

    Returns:
        pipeline_output_object    (dict)              : Contains pipeline output objects
    """

    # Initialize the logger

    logger_base = item_input_object.get('logger').getChild('prepare_itemization_aer_results')
    logger = logging.LoggerAdapter(logger_base, item_input_object.get('logging_dict'))

    if item_input_object.get('item_input_params') is not None and \
            item_input_object.get('item_input_params').get('run_hybrid_v2_flag') and run_successful:
        target_app = GlobalConfigParams.item_aer_seq

    else:
        target_app = GlobalConfigParams.disagg_postprocess_enabled_app

    if item_input_object.get("pilot_level_config_present") is not None and item_input_object.get("pilot_level_config_present") <= 0:
        target_app = []

    # Function to deal with appliances whose output should be written as a part of true disagg

    api_aer_item_output, item_output_object = itemization_to_disagg(target_app, item_input_object, item_output_object, pipeline_output_object, run_successful)

    bill_cycle_estimate = np.round(item_output_object.get('bill_cycle_estimate'), decimals=2)

    # Get variables ready to write gbMonthlyOutput

    output_write_idx_map = item_output_object.get('output_write_idx_map')
    app_name_list = list(output_write_idx_map.keys())

    app_id_dict = {}

    app_id_dict = prepare_appid_dict(app_name_list, output_write_idx_map, app_id_dict)


    app_id_dict[12] = 59
    app_id_dict[13] = 66
    app_id_dict[14] = 5
    app_id_dict[len(bill_cycle_estimate[0])-1] = get_app_id('others')

    # Call the function to log the output matrix

    log_item_matrix(app_id_dict, bill_cycle_estimate, logger)

    logger.info('Preparing Itemization API output done | ')

    return api_aer_item_output, item_output_object
