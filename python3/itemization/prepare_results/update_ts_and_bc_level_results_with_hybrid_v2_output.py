"""
Author - Nisha Agarwal
Date - 3rd December 2023
Updates timestamp level and billing cycle level results with hybrid v2 output
"""

# import functions from within the project

from python3.utils.write_estimate import write_estimate

from python3.config.pipeline_constants import GlobalConfigParams


def update_results(pipeline_input_object, item_input_object, item_output_object, item_output_map,
                   ts_est_aft_item, bc_est_aft_item, logger_itemization, run_successful):

    """
    updates timestamp level and billing cycle level results with hybrid v2 output

    Parameters:
        pipeline_input_object           (dict)                 : Contains pipeline input objects
        item_input_object               (dict)                 : Contains all inputs required to run the pipeline
        item_output_object              (dict)                 : Contains all outputs generated by running the pipeline
        item_output_map                 (dict)                 : app index code
        ts_est_aft_item                 (np.ndarray)           : ts level itemization output
        bc_est_aft_item                 (np.ndarray)           : bc level itemization output
        logger_itemization              (logger)               : logger object
        run_successful                  (bool)                 : flag that represents whether hybrid v2 run is successful

    Returns:
        item_output_object              (dict)                 : Contains all outputs generated by running the pipeline
    """

    if item_input_object.get('item_input_params').get('run_hybrid_v2_flag') and run_successful:
        target_app = GlobalConfigParams.item_aer_seq

    else:
        target_app = GlobalConfigParams.disagg_postprocess_enabled_app

    # udpate monthly and ts level estimation with hybrid output

    for app in target_app:

        item_output_object = \
            update_results_for_each_app(app, item_input_object, item_output_object, item_output_map, ts_est_aft_item, bc_est_aft_item)

    logger_itemization.info('Successfully updated api output with hybrid output  | ')

    return item_output_object


def update_results_for_each_app(app, item_input_object, item_output_object, item_output_map,
                                ts_est_aft_item, bc_est_aft_item):

    """
    updates timestamp level and billing cycle level results with hybrid v2 output

    Parameters:
        pipeline_input_object           (dict)                 : Contains pipeline input objects
        item_input_object               (dict)                 : Contains all inputs required to run the pipeline
        item_output_object              (dict)                 : Contains all outputs generated by running the pipeline
        item_output_map                 (dict)                 : app index code
        ts_est_aft_item                 (np.ndarray)           : ts level itemization output
        bc_est_aft_item                 (np.ndarray)           : bc level itemization output
        logger_itemization              (logger)               : logger object
        run_successful                  (bool)                 : flag that represents whether hybrid v2 run is successful

    Returns:
        item_output_object              (dict)                 : Contains all outputs generated by running the pipeline
    """

    if app == 'hvac':
        app_out_idx = item_output_object.get('output_write_idx_map').get(app)[0]
        app_read_idx = item_output_map.get(app)[0]

        item_output_object = write_estimate(item_output_object, bc_est_aft_item, app_read_idx,
                                            app_out_idx, 'bill_cycle')

        if app not in item_input_object["item_input_params"]["backup_app"]:
            item_output_object = write_estimate(item_output_object, ts_est_aft_item, app_read_idx,
                                                app_out_idx, 'epoch')

        app_out_idx = item_output_object.get('output_write_idx_map').get(app)[1]
        app_read_idx = item_output_map.get(app)[1]

        item_output_object = write_estimate(item_output_object, bc_est_aft_item, app_read_idx,
                                            app_out_idx, 'bill_cycle')

        if app not in item_input_object["item_input_params"]["backup_app"]:
            item_output_object = write_estimate(item_output_object, ts_est_aft_item, app_read_idx, app_out_idx, 'epoch')

    elif app != 'others':
        app_out_idx = item_output_object.get('output_write_idx_map').get(app)
        app_read_idx = item_output_map.get(app)

        if app in GlobalConfigParams.hybrid_v2_additional_app:
            app_out_idx = app_read_idx

        item_output_object = write_estimate(item_output_object, bc_est_aft_item, app_read_idx, app_out_idx, 'bill_cycle')

        if app not in item_input_object["item_input_params"]["backup_app"]:
            item_output_object = write_estimate(item_output_object, ts_est_aft_item, app_read_idx, app_out_idx, 'epoch')

        if app == 'pp' and ((item_input_object.get("item_input_params") is not None) and
                            (item_input_object.get("item_input_params").get("pp_removed") is not None) and
                            item_input_object.get("item_input_params").get("pp_removed") == 1):
            item_output_object['epoch_estimate'][:, app_out_idx] = 0
            item_output_object['bill_cycle_estimate'][:, app_out_idx] = 0

    return item_output_object
