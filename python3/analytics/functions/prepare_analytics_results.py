"""
Author - Mayank Sharan
Date - 19th Nov 2018
After the completion of the pipeline this function arranges the output in the format needed and returns as a dictionary
"""

# Import python packages

import copy
import logging
import numpy as np

# Import functions from within the project

from python3.config.Cgbdisagg import Cgbdisagg

from python3.utils.maths_utils.find_seq import find_seq

from python3.config.mappings.get_app_id import get_app_id

from python3.master_pipeline.post_pipeline_ops.handle_vip_user import handle_vip_user

from python3.utils.validate_output_schema import validate_lifestyle_profile_schema_for_billcycle

from python3.utils.validate_output_schema import validate_appliance_profile_schema_for_billcycle


def populate_lifestyle_profile(analytics_input_object, analytics_output_object, empty_lifestyle_profile, logger, logger_pass):

    """
    Populate lifestyle profile after schema validation for each billcycle

    Parameters:
        analytics_input_object           (dict)              : Contains all inputs required to run the pipeline
        analytics_output_object          (dict)              : Contains all outputs generated by running the pipeline
        empty_lifestyle_profile          (dict)              : Initialized lifestyle profile dictionary
        logger                           (logger)            : Logger object
        logger_pass                      (dict)              : Contains all variables needed for logging

    Returns:
        lifestyle_profile_output         (dict)              : Final prepared and validated lifestyle profile
    """

    lifestyle_profile_filled = analytics_output_object.get('lifestyle_profile')

    lifestyle_profile_output = copy.deepcopy(empty_lifestyle_profile)

    # Writing lifestyle profiles for all required bill cycles

    lifestyle_profile_fill_bill_cycles = analytics_input_object.get("out_bill_cycles_by_module").get("lifestyle_profile")

    for bill_cycle_raw_idx in range(len(lifestyle_profile_fill_bill_cycles)):

        bc_start = lifestyle_profile_fill_bill_cycles[bill_cycle_raw_idx, 0]

        # validate lifestyle profile for this bill cycle

        valid_flag = validate_lifestyle_profile_schema_for_billcycle(analytics_output_object, bc_start, logger_pass)

        if valid_flag:

            lifestyle_profile_bc = lifestyle_profile_filled[bc_start]['profileList'][0]

            lifestyle_profile_output['profileList'].append(lifestyle_profile_bc)

            logger.info("Writing lifestyle profile for billcycle | %d " % bc_start)

        else:

            logger.error("Skipping writing lifestyle profile for billcycle | %d" % bc_start)

    return lifestyle_profile_output


def populate_appliance_profile(analytics_input_object, analytics_output_object, empty_appliance_profile, logger, logger_pass):

    """
    Populate appliance profile after schema validation for each billcycle

    Parameters:
        analytics_input_object              (dict)              : Contains all inputs required to run the pipeline
        analytics_output_object             (dict)              : Contains all outputs generated by running the pipeline
        empty_appliance_profile          (dict)              : Initialized appliance profile dictionary
        logger                           (logger)            : Logger object
        logger_pass                      (dict)              : Contains all variables needed for logging

    Returns:
        appliance_profile_output         (dict)              : Final prepared and validated appliance profile
    """

    appliance_profile_filled = analytics_output_object.get('appliance_profile')

    appliance_profile_output = copy.deepcopy(empty_appliance_profile)

    # Writing appliance profiles for all required bill cycles

    appliance_profile_fill_bill_cycles = analytics_input_object.get("out_bill_cycles_by_module").get("app_profile")

    for bill_cycle_raw_idx in range(len(appliance_profile_fill_bill_cycles)):

        bc_start = appliance_profile_fill_bill_cycles[bill_cycle_raw_idx, 0]

        # validate appliance profile for this bill cycle

        valid_flag = validate_appliance_profile_schema_for_billcycle(analytics_output_object, bc_start, logger_pass)

        if valid_flag:

            appliance_profile_bc = appliance_profile_filled[bc_start]['profileList'][0]

            appliance_profile_output['profileList'].append(appliance_profile_bc)

            logger.info("Writing appliance profile for billcycle | %d " % bc_start)

        else:

            logger.error("Skipping writing appliance profile for billcycle | %d" % bc_start)

    return appliance_profile_output


def prepare_analytics_results(analytics_input_object, analytics_output_object):

    """
    Parameters:
        analytics_input_object (dict)              : Contains all inputs required to run the pipeline
        analytics_output_object(dict)              : Contains all outputs generated by running the pipeline

    Returns:
        api_analytics_output   (dict)              : Contains all analytics outputs in the format to post using the API
    """

    # Initialize the logger

    logger_base = analytics_input_object.get('logger').getChild('prepare_analytics_results')
    logger = logging.LoggerAdapter(logger_base, analytics_input_object.get('logging_dict'))

    logger_pass = {
        'logger_base': logger_base,
        'logging_dict': analytics_input_object.get('logging_dict'),
    }

    # Initialize empty lifestyle profile

    empty_lifestyle_profile = {
        "version": "v1",
        "profileList": []
    }

    # Initialize empty appliance profile

    empty_appliance_profile = {
        "version": "v1",
        "profileList": []
    }

    # Initialize the dictionary for output in the format as needed

    api_analytics_output = {
        "lifestyleProfile": empty_lifestyle_profile,
        'applianceProfile': empty_appliance_profile
    }

    # Populate Lifestyle profile

    lifestyle_profile_output = populate_lifestyle_profile(analytics_input_object, analytics_output_object,
                                                          empty_lifestyle_profile, logger, logger_pass)

    api_analytics_output['lifestyleProfile'] = lifestyle_profile_output

    appliance_profile = populate_appliance_profile(analytics_input_object, analytics_output_object,
                                                   empty_appliance_profile, logger, logger_pass)

    api_analytics_output['applianceProfile'] = appliance_profile

    return api_analytics_output
